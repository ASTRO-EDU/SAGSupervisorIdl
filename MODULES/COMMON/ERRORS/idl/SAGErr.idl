#ifndef  _SAGErr_IDL_
#define  _SAGErr_IDL_
	
/*******************************************************************************
* ALMA - Atacama Large Millimiter Array
* (c) European Southern Observatory, 2003 
*
*This library is free software; you can redistribute it and/or
*modify it under the terms of the GNU Lesser General Public
*License as published by the Free Software Foundation; either
*version 2.1 of the License, or (at your option) any later version.
*
*This library is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*Lesser General Public License for more details.
*
*You should have received a copy of the GNU Lesser General Public
*License along with this library; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: AES2IDL.xslt,v 1.9 2007/05/23 08:55:56 nbarriga Exp $"
*************  THIS FILE IS AUTOMATICALLY GENERATED !!!!!!
*/

#include <acserr.idl>

#pragma prefix "sag"
 	
module ACSErr 
{
	// type
	const ACSErr::ACSErrType SAGErr = 900000;
}; // module ACSErr

module SAGErr
{
	 const ACSErr::ErrorCode SAGGeneric = 0;
	 const ACSErr::ErrorCode SAGSupervisorAlreadyActivated = 1;
	 const ACSErr::ErrorCode SAGSupervisorAlreadyDeactivated = 2;
	 const ACSErr::ErrorCode SAGSubArrayManagerAlreadyActivated = 3;
	 const ACSErr::ErrorCode SAGSubArrayManagerAlreadyDeactivated = 4;
	 const ACSErr::ErrorCode SAGSubArrayManagerIsNotRunning = 5;
	 const ACSErr::ErrorCode SAGNoObservingBlocksAvailable = 6;
	 const ACSErr::ErrorCode SAGRecoAlreadyActivated = 7;
	 const ACSErr::ErrorCode SAGRecoAlreadyDeactivated = 8;
	 const ACSErr::ErrorCode SAGDataQualityAlreadyActivated = 9;
	 const ACSErr::ErrorCode SAGDataQualityAlreadyDeactivated = 10;
	 const ACSErr::ErrorCode SAGSciAlreadyActivated = 11;
	 const ACSErr::ErrorCode SAGSciAlreadyDeactivated = 12;
	 const ACSErr::ErrorCode SAGSchedulingBlockIdNotFoundInDatabase = 13;
	 const ACSErr::ErrorCode SAGSchedulingBlockAlreadyInProcessing = 14;
	 const ACSErr::ErrorCode SAGSchedulingBlockIsAlreadyDeactivated = 15;
	 const ACSErr::ErrorCode SAGDataAcquisitionAlreadyStarted = 16;
	 const ACSErr::ErrorCode SAGDataAcquisitionAlreadyStopped = 17;
	
	// excption for type:
	exception SAGErrEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	// excptions for codes:
	exception SAGGenericEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSupervisorAlreadyActivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSupervisorAlreadyDeactivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSubArrayManagerAlreadyActivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSubArrayManagerAlreadyDeactivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSubArrayManagerIsNotRunningEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGNoObservingBlocksAvailableEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGRecoAlreadyActivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGRecoAlreadyDeactivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGDataQualityAlreadyActivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGDataQualityAlreadyDeactivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSciAlreadyActivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSciAlreadyDeactivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSchedulingBlockIdNotFoundInDatabaseEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSchedulingBlockAlreadyInProcessingEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGSchedulingBlockIsAlreadyDeactivatedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGDataAcquisitionAlreadyStartedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SAGDataAcquisitionAlreadyStoppedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	
}; // module SAGErr

#endif

