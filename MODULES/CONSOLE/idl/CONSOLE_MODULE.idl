#ifndef _CONSOLE_IDL_
#define _CONSOLE_IDL_

/*******************************************************************************
*    ACS Community - https://github.com/ACS-Community/ACS-Workshop
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#include <acscomponent.idl>
#include <Types.idl>
//#include "SYSTEMErr.idl"

#pragma prefix "scada"


/** 
 * @file Console.idl
 * SYSTEMErr Console IDL file
 */

module CONSOLE_MODULE 
{
	
	/** @interface Console
	 * Operator's interface to set automatic and manual modes.
	 * Grants manual access to low level components.
	 */
	interface Console :  ACS::ACSComponent
	{
		/**
		 * Set the automatic / manual / emergency mode for the operator. Raises an exception 
		 * if the same mode is asked twice.
		 *
		 *  @param mode if true then automatic mode otherwise manual mode.
		 *  @return void
		 */
		void setMode(in long mode);
			// raises(SYSTEMErr::AlreadyInAutoEx, SYSTEMErr::SystemInManualModeEx, SYSTEMErr::SystemInEmergencyModeEx);
		
		/**
		 * Get the current operator's mode. 
		 *
		 *  @return current operator's mode
		 */
		long getMode();
		
		/**
		 * Start Master Controller Supervisor and all related components (if present)
		 */
		void startMasterController();
			//raises (SYSTEMErr::SystemInManualModeEx, SYSTEMErr::MasterControllerAlreadyRunningEx);
			
		/**
		 * Stop Master Controller
		 */
		void stopMasterController();
			//raises (SYSTEMErr::SystemInManualModeEx, SYSTEMErr::MasterControllerAlreadyStoppedEx);
			
			
		/**
		 * Returns the status of the loaded scheduling block. This is the method used by the console
		 *
		 * Raises exception if no scheduling block is found in the database.
		 * @retun scheduling block ID
		 */
		long loadSchedulingBlock(in long sbid);
			//raises(SYSTEMErr::SchedulingBlockNotYetReadyEx);
			
		/**
		 * Stop the current run under execution. 
		 * @return the status of the stopped run
		 */
		long stopCurrentRun();
			//raises(SYSTEMErr::NoRunExecutingEx, SYSTEMErr::SystemInManualModeEx, SYSTEMErr::SystemInAutoModeEx);
		
		/**
		 * Set the camera on.
		 *
		 *  @return void
		 */
		void cameraOn(in long telescopeID);
			//raises (SYSTEMErr::SystemInAutoModeEx);
		
		/**
		 * Set the camera off.
		 *
		 *  @return void
		 */
		void cameraOff(in long telescopeID);
			//raises (SYSTEMErr::SystemInAutoModeEx);
		
		/**
		 * Move telescope in synchronous mode. Raises an exception if the
		 * requested position is out of limits.
		 *
		 *  @coordinates az, el coordinates
		 *  @return void
		 */    
		void moveTelescope(in TYPES::Position coordinates); 
			//raises(SYSTEMErr::PositionOutOfLimitsEx, SYSTEMErr::SystemInAutoModeEx);

		/**
		 * Current telescope position. 
		 *  @param telescope ID
		 *  @return Telescope position
		 */    
		TYPES::Position getTelescopePosition(in long telescopeID);

	};
};

#endif
