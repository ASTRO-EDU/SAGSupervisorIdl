/*******************************************************************************
*    SAG Community 
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#ifndef _CONSOLE_IDL_
#define _CONSOLE_IDL_

#include <acscomponent.idl>
#include <Types.idl>
#include <CONSOLEErr.idl>



#pragma prefix "sag"


module CONSOLE_MODULE 
{
	

	interface Console :  ACS::ACSComponent
	{		
		/**
		* Activates the SAG Supervisor component.
		* @raise SAGSupervisorAlreadyActivatedEx
		* @return void
		*/
		void startSAGSupervisor()
			raises (
				CONSOLEErr::SAGSupervisorAlreadyActivatedEx
			);

		/**
		* Deactivates the SAG Supervisor component.
		* @raise SAGSupervisorAlreadyDeactivatedEx
		* @return void
		*/
		void stopSAGSupervisor()
			raises (
				CONSOLEErr::SAGSupervisorAlreadyDeactivatedEx
			);
			
			
		/**
		* Forwards the request to the SAGSupervisor
		* @raise SAGSupervisorAlreadyActivatedEx
		* @return void
		*/
		void newSchedulingBlock (in long sbID)
			raises(
				CONSOLEErr::SAGSupervisorIsNotRunningEx
			);	


		/**
		* Forwards the request to the SAGSupervisor
		* @raise SAGSupervisorAlreadyActivatedEx
		* @return void
		*/
		void stopSchedulingBlock (in long sbID)
			raises(
				CONSOLEErr::SAGSupervisorIsNotRunningEx
			);	
	
	
		/**
		* Forwards the request to the SAGSupervisor
		* @raise SAGSupervisorIsNotRunningEx
		* @return void
		*/
		void startObservation(in long sbID)
			raises (
				CONSOLEErr::SAGSupervisorIsNotRunningEx
			);
		
		/**
		* Forwards the request to the SAGSupervisor
		* @raise SAGSupervisorIsNotRunningEx
		* @return void
		*/    
		void stopObservation(in long sbID)
			raises (
				CONSOLEErr::SAGSupervisorIsNotRunningEx
			);


		/**
		* Forwards the request to the SAGSupervisor
		* @raise SAGSupervisorIsNotRunningEx
		* @return void
		*/
		void updateSubArray(in long sbID)
			raises (
				CONSOLEErr::SAGSupervisorIsNotRunningEx
			);

	};
};

#endif
