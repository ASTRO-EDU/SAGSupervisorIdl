/*******************************************************************************
*    SAG Community 
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#ifndef _CONSOLE_IDL_
#define _CONSOLE_IDL_

#include <acscomponent.idl>
#include <Types.idl>
#include <CONSOLEErr.idl>
#include <UTILITYErr.idl>
#include <COMMONErr.idl>

#pragma prefix "sag"

/**
TODO: UTILITYErr should not be here because it is an "internal" exceptions module.
*/
module CONSOLE_MODULE 
{
	
	/** @interface Console
	 * Operator's interface to set automatic and manual modes.
	 * Grants manual access to low level components.
	 */
	interface Console :  ACS::ACSComponent
	{		
		/**
		* Start SAG Supervisor and all related components (if present)
		* @raise ComponentNameNotFoundEx exception if the component's name is not found among the available components (internal check).
		* @raise SAGSupervisorAlreadyStartedEx exception if the SAGSupervisor is already running.
		* @return void
		*/
		void startSAGSupervisor()
			raises (
				CONSOLEErr::SAGSupervisorAlreadyStartedEx, 
				UTILITYErr::ComponentNameNotFoundEx
			);

		/**
		* Stop SAG Supervisor
		* @raise ComponentNameNotFoundEx exception if the component's name is not found among the available components (internal check).
		* @raise SAGSupervisorAlreadyStopped
		* @return void
		*/
		void stopSAGSupervisor()
			raises (
				CONSOLEErr::SAGSupervisorAlreadyStoppedEx, 
				UTILITYErr::ComponentNameNotFoundEx
			);
			
			
		/**
		* Start all components related to a specific Scheduling block
		* The request is forwarded to the SAGSupervisor.
		* @raise SAGSupervisorIsNotRunning if the SAGSupervisor is not running.
		* @return void
		*/
		void startSubArrayManager(in long sbID)
			raises (
				CONSOLEErr::SAGSupervisorIsNotRunningEx
			);

		/**
		* Stop all components related to a specific Scheduling block.
		* The request is forwarded to the SAGSupervisor.
		* @raise SAGSupervisorIsNotRunning if the SAGSupervisor is not running.
		* @return void
		*/
		void stopSubArrayManager(in long sbID)
			raises (
				CONSOLEErr::SAGSupervisorIsNotRunningEx
			);














		/**
		* Start all components related to a specific Observing Block 
		* @raise SchedulingBlockIdNotFoundInDatabaseEx exception if no scheduling block with id=sbID is found in the database.
		* @retun void
		*/
		void startPipelines(in long sbID)
			raises(
				COMMONErr::SchedulingBlockIdNotFoundInDatabaseEx
			);
			
		/**
		* Stop all components related to a specific Scheduling Block
		* @raise SchedulingBlockIdNotFoundInDatabaseEx exception if no scheduling block with id=sbID is found in the database.
		* @return void
		*/
		void stopPipelines(in long sbID)
			raises(
				COMMONErr::SchedulingBlockIdNotFoundInDatabaseEx
			);
		
		
		/**
		* Start the data processing related to a Scheduling block
		* @raise SchedulingBlockIdNotFoundInDatabaseEx exception if no scheduling block with id=sbID is found in the database.
		* @return void
		*/
		void startDataProcessing(in long sbID)
			raises(
				COMMONErr::SchedulingBlockIdNotFoundInDatabaseEx
			);
		
		/**
		* Stop the data processing related to a Scheduling block
		* @raise SchedulingBlockIdNotFoundInDatabaseEx exception if no scheduling block with id=sbID is found in the database.
		* @return void
		*/    
		void stopDataProcessing(in long sbID)
			raises(
				COMMONErr::SchedulingBlockIdNotFoundInDatabaseEx
			);

	};
};

#endif
