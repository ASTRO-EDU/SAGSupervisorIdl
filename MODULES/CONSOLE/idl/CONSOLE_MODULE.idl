/*******************************************************************************
*    SAG Community 
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#ifndef _CONSOLE_IDL_
#define _CONSOLE_IDL_

#include <acscomponent.idl>
#include <Types.idl>
#include <CONSOLEErr.idl>
#include <UTILITYErr.idl>

#pragma prefix "sag"

module CONSOLE_MODULE 
{
	
	/** @interface Console
	 * Operator's interface to set automatic and manual modes.
	 * Grants manual access to low level components.
	 */
	interface Console :  ACS::ACSComponent
	{		
		/**
		 * Start SAG Supervisor and all related components (if present)
		 */
		void startSAGSupervisor()
			raises (CONSOLEErr::SAGSupervisorAlreadyStartedEx, UTILITYErr::ComponentNameNotFoundEx);
			
		/**
		 * Stop SAG Supervisor
		 */
		void stopSAGSupervisor()
			raises (CONSOLEErr::SAGSupervisorAlreadyStoppedEx, UTILITYErr::ComponentNameNotFoundEx);
			
			
		/**
		 * Start all components related to a specific sub array 
		 *
		 * Raises exception if no scheduling block is found in the database.
		 * @retun void
		 */
		void startSubArrayManager(in long subArrayID);
			
		/**
		 * Stop all components related to a specific sub array  
		 * @return void
		 */
		void stopSubArrayManager(in long subArrayID);
		
		/**
		 * Start all components related to a specific Observing Block 
		 *
		 * Raises exception if no scheduling block is found in the database.
		 * @retun void
		 */
		void startOBPipelines(in long subArrayID,in long obID);
			
		/**
		 * Stop all components related to a specific Observing Block
		 * @return void
		 */
		void stopOBPipelines(in long subArrayID,in long obID);
		
		
		/**
		 * Start the data processing related to a Observing block
		 *
		 *  @return void
		 */
		void startOBDataProcessing(in long subArrayID,in long obID);
		
		/**
		 * Stop the data processing related to a Observing block
		 * 
		 *  @return void
		 */    
		void stopOBDataProcessing(in long subArrayID,in long obID); 

	};
};

#endif
