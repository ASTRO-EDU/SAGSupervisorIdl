/*******************************************************************************
Copyright (C) 2020 INAF

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Authors:
Andrea Bulgarelli <andrea.bulgarelli@inaf.it>
Leonardo Baroncelli <leonardo.baroncelli@inaf.it>
Nicolo' Parmiggiani <nicolo.parmiggiani@inaf.it>
Antonio Addis <antonio.addis@inaf.it>
*******************************************************************************/

#ifndef _SAG_IDL_
#define _SAG_IDL_

#include <acscomponent.idl>
#include <Types.idl>
#include <SAGErr.idl>


#pragma prefix "sag"


module SAG_MODULE
{
	

	/**
		This interface defines methods to send messages through ACS' notification channels. It is used internally within the SAG system.
	*/
	interface SAGNotificationManager : ACS::ACSComponent {

		/** 
		*
		* @param
		* @raise 
		* @return 
		*/        
		void sendMessageToMON (in TYPES::ChannelEvent_TO_MON evt);

		/** 
		*
		* @param 
		* @raise 
		* @return 
		*/        
		void sendMessageToADH (in TYPES::ChannelEvent_TO_ADH evt);

		/** 
		*
		* @param 
		* @raise 
		* @return 
		*/        
		void sendMessageToCC (in TYPES::ChannelEvent_TO_CC evt);
		
		/** 
		*
		* @param 
		* @raise 
		* @return 
		*/        
		void sendMessageToRM (in TYPES::ChannelEvent_TO_RM evt);
		
		/** 
		*
		* @param 
		* @raise 
		* @return 
		*/        
		void sendMessageToHMI (in TYPES::ChannelEvent_TO_HMI evt);


	};

	/**
		This interface exposes methods to start/stop the internal monitoring of the SAG. It is used internally within the SAG system.
	*/
	interface SAGSubArrayMonitor : ACS::ACSComponent {


	};

	/**
		This interface allows the communication with the SAG database. It is used internally within the SAG system.
	*/
    interface SAGDatabase : ACS::ACSComponent {

        /** 
        * 
        *
        * @param 
        * @raise 
        * @return 
        */        
        long getSubArrayIDFromSB(in long sbID);

    };   


	/**
		This interface is the entry point to the SAG. External components MUST use this interface to interact with the SAG.
	*/
	interface SAGSupervisor :  ACS::ACSComponent
	{

		/**
		* [SUP-040] When a new SB is received, a dedicated SAG pipeline shall start in an automatic and controlled way.

		* @param sbID: the id of the Scheduling Block.
		* @raise SAGSchedulingBlockIdNotFoundInDatabaseEx 
		* @raise SAGSubArrayManagerAlreadyActivatedEx
		* @raise SAGRecoAlreadyActivatedEx
		* @raise SAGDataQualityAlreadyActivatedEx
		* @raise SAGSciAlreadyActivatedEx
		* @return void
		*/
		void newSchedulingBlock (in long sbID)
			raises(
				SAGErr::SAGSchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGSubArrayManagerAlreadyActivatedEx,
				SAGErr::SAGRecoAlreadyActivatedEx,
				SAGErr::SAGDataQualityAlreadyActivatedEx,
				SAGErr::SAGSciAlreadyActivatedEx
			);


		/**
		* [SUP-110] SAG shall receive information when the execution of a Scheduling Blocks is cancelled. Analysis of the data taken until the cancellation command shall be executed.
		*
		* @param sbID: the id of the Scheduling Block.
		* @raise SAGSchedulingBlockIdNotFoundInDatabaseEx
		* @raise SAGSubArrayManagerAlreadyDeactivatedEx
		* @raise SAGRecoAlreadyDeactivatedEx
		* @raise SAGDataQualityAlreadyDeactivatedEx 
		* @raise SAGSciAlreadyDeactivatedEx
		* @return void
		*/
		void stopSchedulingBlock (in long sbID)
			raises(
				SAGErr::SAGSchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGSubArrayManagerAlreadyDeactivatedEx,
				SAGErr::SAGRecoAlreadyDeactivatedEx,
				SAGErr::SAGDataQualityAlreadyDeactivatedEx,
				SAGErr::SAGSciAlreadyDeactivatedEx
			);	
		
	
		/**
		* [SUP-50] When a sub-array enters in observing state, the SAG Supervisor shall inform the related SAG pipeline, and new data shall be received.
		*
		* @param sbID: the id of the Scheduling Block.
		* @raise SAGSchedulingBlockIdNotFoundInDatabaseEx
		* @raise SAGDataProcessingAlreadyStartedEx
		* @return void
		*/
		void startObservation (in long sbID)
			raises(
				SAGErr::SAGSchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGDataProcessingAlreadyStartedEx
			);

			
					
		/**
		* [SUP-060] When a sub-array stops the observation, the SAG Supervisor shall inform SAG pipelines that shall shutdown data processing in an automatic and controlled way.
	
		* @param sbID: the id of the Scheduling Block.
		* @raise SAGSchedulingBlockIdNotFoundInDatabaseEx
		* @raise SAGDataProcessingAlreadyStoppedEx
		* @return void
		*/
		void stopObservation (in long sbID)
			raises(
				SAGErr::SAGSchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGDataProcessingAlreadyStoppedEx
			);


		/**
		* [SUP-090] SAG Supervisor shall receive the modified SB when a sub-array is modified. 
		* 
		* @param sbID: the id of the Scheduling Block.
		* @raise SAGSchedulingBlockIdNotFoundInDatabaseEx
		* @return void
		*/
		void updateSubArray (in long sbID)
			raises(
				SAGErr::SAGSchedulingBlockIdNotFoundInDatabaseEx
			);


		
	};

	/**
		This interface manages subarray configurations. It is used internally within the SAG system.
	*/
	interface SAGSubArrayManager : ACS::ACSComponent
	{

		/**
		* Initialize the scheduling block ID of the SubArrayManager component.
		* @param sbID: the id of the Scheduling Block.
		*/
		void initializeWithData (in long sbID);

			
		/**
		* Activate the SAGReco, SAGSci and SAGDQ components related to a specific Scheduling Block. 
		* Start the SAGReco, SAGSci and SAGDQ processes.
		*
		* @raise SAGRecoAlreadyActivatedEx 
		* @raise SAGDataQualityAlreadyActivatedEx
		* @raise SAGSciAlreadyActivatedEx		 
		* @retun void
		*/
		void activateAndStartPipelines()
			raises(
				SAGErr::SAGRecoAlreadyActivatedEx,
				SAGErr::SAGDataQualityAlreadyActivatedEx,
				SAGErr::SAGSciAlreadyActivatedEx
			);
			
		/**
		* Stop the SAGReco, SAGSci and SAGDQ processes.
		* Deactivate the SAGReco, SAGSci and SAGDQ components.
		*
		* @raise SAGRecoAlreadyActivatedEx
		* @raise SAGDataQualityAlreadyActivatedEx
		* @raise SAGSciAlreadyActivatedEx
		* @return void
		*/
		void stopAndDeactivatePipelines()
			raises(
				SAGErr::SAGRecoAlreadyDeactivatedEx,
				SAGErr::SAGDataQualityAlreadyDeactivatedEx,
				SAGErr::SAGSciAlreadyDeactivatedEx
			);		
			


		/**
		* Start the data aquisition for a SubArray data Processing.
		* 
		* @raise SAGDataProcessingAlreadyStartedEx
		* @return void
		*/
		void startDataProcessing ()
			raises(
				SAGErr::SAGDataProcessingAlreadyStartedEx
			);			
			
		/**
		* Stop the data aquisition for a SubArray data Processing.
		* 
		* @raise SAGDataProcessingAlreadyStoppedEx
		* @return void
		*/
		void stopDataProcessing ()
			raises(
				SAGErr::SAGDataProcessingAlreadyStoppedEx
			);


		/**
		* Return monitoring data.
		* @return long  
		*
		* TODO:
		* The method should return a custom type with several informations. For now it has a dummy implementation. 
		* This method should be inherited from SAGProcessStarter 
		*/
		TYPES::MonitoredParamsList getMonitoringInfo (in string compName)
			raises(SAGErr::SAGGenericEx);



		/**
		* TBD 
		* 
		* @param sbID: the id of the Scheduling Block.
		* @return void
		*/
		void updateSubArray()
			raises(SAGErr::SAGGenericEx);
		

	};

	/**
		TODO
	*/
	interface SAGProcessStarter
	{
		// TODO
		// This class has the responasbility to start/stop Linux processes and monitor their status
		// SAGReco, SAGDataQuality and SAGSci must inherit from this class		
	};

	/**
		This interface is used to start RECO analysis processes. It is used internally within the SAG system.
	*/
	interface SAGReco : ACS::ACSComponent, SAGProcessStarter
	{
		
		/**
		* Initialize the scheduling block ID of the SAGReco component.
		* @param sbID: the id of the Scheduling Block.
		*/
		void initializeWithData (in long sbID);

		/**
		* Start the RECO pipeline process.
		* @return void
		*/
		void start ()
			raises(SAGErr::SAGGenericEx);

		/**
		* Kill the RECO pipeline process.
		* @return void
		*/
		void stop ()
			raises(SAGErr::SAGGenericEx);

		/**
		* Start Data Processing
		* @return void
		*/
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
		
		/**
		* Stop Data Processing
		* @return void
		*/
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);

		/**
		* Return monitoring data.
		* @return long  
		*
		* TODO:
		* The method should return a custom type with several informations. For now it has a dummy implementation. 
		* This method should be inherited from SAGProcessStarter 
		*/
		TYPES::MonitoredParamsList getMonitoringInfo()
			raises(SAGErr::SAGGenericEx);

	};

	/**
		This interface is used to start DQ analysis processes. It is used internally within the SAG system.
	*/
	interface SAGDataQuality : ACS::ACSComponent, SAGProcessStarter
	{

		/**
		* Initialize the scheduling block ID of the SAGDataQuality component.
		* @param sbID: the id of the Scheduling Block.
		*/
		void initializeWithData (in long sbID);

		/**
		* Start the DQ pipeline process.
		* @return void
		*/
		void start ()
			raises(SAGErr::SAGGenericEx);

		/**
		* Kill the DQ pipeline process.
		* @return void
		*/
		void stop ()
			raises(SAGErr::SAGGenericEx);

		/**
		* Start Data Processing
		* @return void
		*/
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
		
		/**
		* Stop Data Processing
		* @return void
		*/
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);


		/**
		* Return monitoring data.
		* @return long  
		*
		* TODO:
		* The method should return a custom type with several informations. For now it has a dummy implementation. 
		* This method should be inherited from SAGProcessStarter 
		*/
		TYPES::MonitoredParamsList getMonitoringInfo()
			raises(SAGErr::SAGGenericEx);


	};
	
	/**
		This interface is used to start SCI analysis processes. It is used internally within the SAG system.
	*/
	interface SAGSci : ACS::ACSComponent, SAGProcessStarter
	{

		/**
		* Initialize the scheduling block ID of the SAGSci component.
		* @param sbID: the id of the Scheduling Block.
		*/
		void initializeWithData (in long sbID);

		/**
		* Start the SCI pipeline process.
		* @return void
		*/
		void start ()
			raises(SAGErr::SAGGenericEx);

		/**
		* Kill the SCI pipeline process.
		* @return void
		*/
		void stop ()
			raises(SAGErr::SAGGenericEx);

		/**
		* Start Data Processing
		* @return void
		*/
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
		
		/**
		* Stop Data Processing
		* @return void
		*/
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);
	

		/**
		* Return monitoring data.
		* @return long  
		*
		* TODO:
		* The method should return a custom type with several informations. For now it has a dummy implementation. 
		* This method should be inherited from SAGProcessStarter 
		*/
		TYPES::MonitoredParamsList getMonitoringInfo()
			raises(SAGErr::SAGGenericEx);

	};

};



#endif

