/*******************************************************************************
*    SAG Community 
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#ifndef _SAG_IDL_
#define _SAG_IDL_

#include <acscomponent.idl>
#include <Types.idl>
#include <SAGErr.idl>


#pragma prefix "sag"


module SAG_MODULE
{

	interface SAGSupervisor :  ACS::ACSComponent
	{

		/**
		* SUP-040 When a new SB is received, a dedicated SAG pipeline shall start in an automatic and controlled way.
		* The SAGSupervisor receives the command to start the SubArrayManager for a specific subArrayID. 
		* The SubArrayManager starts the SAGReco, SAGSci and SAGDQ components. 
		* @raise SAGSchedulingBlockIdNotFoundInDatabase exception if no scheduling block with id=sbID is found in the database.
		* @raise SAGSchedulingBlockAlreadyInProcessing exception if the scheduling block is already being processed.
		* @return void
		*/
		void newSchedulingBlock (in long sbID)
			raises(
				SAGErr::SAGSchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGSchedulingBlockAlreadyInProcessingEx
			);


		/**
		* SUP-110 SAG shall receive information when the execution of a Scheduling Blocks is cancelled. Analysis of the data taken until the cancellation command shall be executed.
		* The SubArrayManager and its child components are deactivated.
		* @raise SAGSchedulingBlockIdNotFoundInDatabase exception if no scheduling block with id=sbID is found in the database.
		* @raise SAGSchedulingBlockIsAlreadyStopped exception if the scheduling block is not being processed.
		* @return void
		*/
		void stopSchedulingBlock (in long sbID)
			raises(
				SAGErr::SAGSchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGSchedulingBlockIsAlreadyStoppedEx
			);	
		
	

	
			
		/**
		 * Start pipelines data processing for a Scheduling Block
		 * SUP-050 When a sub-array enters in observing state, the SAG Supervisor shall inform the related SAG pipeline, and new data shall be received.
		 * This method ask to the SubArrayManager to start the data procesing for a specific Sub Array and Observing Block
		 * Raises an exception if called twice or if no Sub Array and Observation Block are found in the database
		 * @return None
		 */
		void startDataProcessing (in long sbID)
			raises(SAGErr::SAGGenericEx);
			
					
		/**
		 * stop  pipelines data processing for a Scheduling Block
		 * SUP-060 When a sub-array stops the observation, the SAG Supervisor shall inform SAG pipelines that shall shutdown data processing in an au-tomatic and controlled way.
		 * This method ask to the SubArrayManager to stop the data procesing for a specific Sub Array and Observing Block
		 * Raises an exception if called twice or if no Sub Array and Observation Block are found in the database
		 * @return None
		 */
		void stopDataProcessing(in long sbID)
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Update pipelines when Sub-Array change status
		 * SUP-090 SAG Supervisor shall receive the modified SB when a sub-array is modified. 
		 * @return None
		 */
		void updateSubArray (in long sbID)
			raises(SAGErr::SAGGenericEx);


		
	};

	interface SAGSubArrayManager : ACS::ACSComponent
	{

		/**
		* Stores the scheduling block ID.
		*/
		void start (in long sbID);

		/**
		* TBD.
		*/
		void stop ();
			
		/**
		* Start all components (SAGRECO, SAGDQ, SAGSCI) related to a specific Scheduling Block. 
		*
		* @raise SAGNoObservingBlocksAvailable exception
		* @raise SAGRecoAlreadyStarted exception 
		* @raise SAGDataQualityAlreadyStarted exception
		* @raise SAGSciAlreadyStarted exception		 
		* @retun void
		*/
		void startPipelines()
			raises(
				SAGErr::SAGNoObservingBlocksAvailableEx,
				SAGErr::SAGRecoAlreadyStartedEx,
				SAGErr::SAGDataQualityAlreadyStartedEx,
				SAGErr::SAGSciAlreadyStartedEx
			);
			
		/**
		* Stop all components (SAGRECO, SAGDQ, SAGSCI) related to a specific Scheduling Block.
		*
		* @raise SAGRecoAlreadyStarted exception 
		* @raise SAGDataQualityAlreadyStarted exception
		* @raise SAGSciAlreadyStarted exception
		* @return void
		*/
		void stopPipelines()
			raises(
				SAGErr::SAGRecoAlreadyStoppedEx,
				SAGErr::SAGDataQualityAlreadyStoppedEx,
				SAGErr::SAGSciAlreadyStoppedEx
			);		
			













		/**
		 * Start Sub Array Data Processing  for an Observing Block.
		 * 
		 * Raises an exception if called twice.
		 * @param  Sub Array Data Type
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
			
		/**
		 * Stop Sub Array Data Processing for an Observing Block.
		 * 
		 * Raises an exception if called twice.
		 * @param  Sub Array Data Type
		 * @return None
		 */
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Update Sub-Array status
		 * SUP-090 SAG Supervisor shall receive the modified SB when a sub-array is modified. 
		 * @return None
		 */
		void updateSubArray()
			raises(SAGErr::SAGGenericEx);
		

	};
		
	interface SAGReco : ACS::ACSComponent
	{

		/**
		* Start the SAG RECO Supervisor.
		* The SAG RECO Supervisor will load all its components
		* @param  @param  Scheduling Block ID
		* @return None
		*/
		void start (in long sbID);

		// Stop the SAG Reco Supervisor. The SAG Reco Supervisor will stop all its
		// components Raises an exception if called twice.
		// @return None
		void stop ();

		/**
		 * Start the Reco data processing.
		 * Start the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Stop the Reco data processing.
		 * Stop the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		 
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
	};

	interface SAGDataQuality : ACS::ACSComponent
	{

		/**
		 * Start the SAGDataQuality component.
		 * 
		 * Raises an exception if called twice.
		 * @param  Scheduling Block ID
		 * @return None
		 */
		void start (in long sbID)
			raises(SAGErr::SAGDataQualityAlreadyStartedEx);

		/* Stop the SAG Data Quality component.
		*  Raises an exception if called twice.
		*  @return None
		*/
		void stop ()
			raises(SAGErr::SAGDataQualityAlreadyStoppedEx);
		
		/**
		 * Start the Data Quality data processing.
		 * Start the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Stop the Data Quality data processing.
		 * Stop the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);

	};
	
	 interface SAGSci : ACS::ACSComponent
	{

		/**
		 * Start the SAGSci component.
		 * 
		 * Raises an exception if called twice.
		 * @param  Scheduling Block ID
		 * @return None
		 */
		void start (in long sbID)
			raises(SAGErr::SAGSciAlreadyStartedEx);

		/**
		* Stop the SAGSci component. 
		* The SAG Sci Supervisor will stop all its
		* Raises an exception if called twice.
		* @return None
		*/
		void stop ()
			raises(SAGErr::SAGSciAlreadyStoppedEx);
						
		/**
		 * Start the SCI data processing.
		 * Start the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Stop the SCI data processing.
		 * Stop the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);

		

	};

};



#endif

