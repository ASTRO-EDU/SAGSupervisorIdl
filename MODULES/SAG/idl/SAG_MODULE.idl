/*******************************************************************************
*    SAG Community 
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#ifndef _SAG_IDL_
#define _SAG_IDL_

#include <acscomponent.idl>
#include <Types.idl>
#include <SAGErr.idl>
#include <UTILITYErr.idl>
#include <COMMONErr.idl>

#pragma prefix "sag"

/**
TODO: UTILITYErr should not be here because it is an "internal" exceptions module.
*/
module SAG_MODULE
{

	interface SAGSupervisor :  ACS::ACSComponent
	{
		/**
		* TBD.
		*/
		void start ();
			
		/**
		* TBD.
		*/
		void stop ();
			
		/**
		* Startup a SubArrayManager component
		* SUP-040 When a new SB is received, a dedicated SAG pipeline shall start in an automatic and controlled way.
		* The SAGSupervisor receives the command to start the SubArrayManager for a specific subArrayID. 
		* The SAGSubArray component is started by the SAGSupervisor
		* @raise SchedulingBlockIdNotFoundInDatabaseEx exception if no scheduling block with id=sbID is found in the database.
		* @raise SAGSubArrayManagerAlreadyStarted exception if the SubArrayManager component with id=sbID is already been started.
		* @return void
		*/
		void startSubArrayManager	(in long sbID)
			raises(
				COMMONErr::SchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGSubArrayManagerAlreadyStartedEx
			);
			
						
		/**
		* Stop a SubArrayManager component
		* The SAGSupervisor receives the command to stop the SubArrayManager for a specific subArrayID.
		* The SAGSubArray component is stopped by the SAGSupervisor
		* @raise SchedulingBlockIdNotFoundInDatabaseEx exception if no Sub Array is found in the database.
		* @raise SAGSubArrayManagerAlreadyStopped exception if the SubArrayManager component with id=sbID is already been stopped.
		* @return void
		*/	
		void stopSubArrayManager (in long sbID)
			raises(
				COMMONErr::SchedulingBlockIdNotFoundInDatabaseEx,
				SAGErr::SAGSubArrayManagerAlreadyStoppedEx
			);		
			

























		/**
		 * Start components for the RECO,SCI,DQ pipelines for a specific SubArray and Observing Block 
		 * This command is sent from the SAGSupervisor to the SubArrayManager
		 * Raises exception if no scheduling block or Sub Array are found in the database.
		 * @retun void
		 */
		void startPipelines(in long sbID);
			
		/**
		 * Stop components for the RECO,SCI,DQ pipelines for a specific SubArray and Observing Block
		 * This command is sent from the SAGSupervisor to the SubArrayManager
		 * Raises exception if no scheduling block or SubArray is found in the database.
		 * @return void
		 */
		void stopPipelines(in long sbID);
	
			
		/**
		 * Start pipelines data processing for a Scheduling Block
		 * SUP-050 When a sub-array enters in observing state, the SAG Supervisor shall inform the related SAG pipeline, and new data shall be received.
		 * This method ask to the SubArrayManager to start the data procesing for a specific Sub Array and Observing Block
		 * Raises an exception if called twice or if no Sub Array and Observation Block are found in the database
		 * @return None
		 */
		void startDataProcessing (in long sbID)
			raises(SAGErr::SAGGenericEx);
			
					
		/**
		 * stop  pipelines data processing for a Scheduling Block
		 * SUP-060 When a sub-array stops the observation, the SAG Supervisor shall inform SAG pipelines that shall shutdown data processing in an au-tomatic and controlled way.
		 * This method ask to the SubArrayManager to stop the data procesing for a specific Sub Array and Observing Block
		 * Raises an exception if called twice or if no Sub Array and Observation Block are found in the database
		 * @return None
		 */
		void stopDataProcessing(in long sbID)
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Update pipelines when Sub-Array change status
		 * SUP-090 SAG Supervisor shall receive the modified SB when a sub-array is modified. 
		 * @return None
		 */
		void updateSubArray (in long sbID)
			raises(SAGErr::SAGGenericEx);


		
	};

	interface SAGSubArrayManager : ACS::ACSComponent
	{

		/**
		* TBD.
		*/
		void start ();

		/**
		* TBD.
		*/
		void stop ();
			
		/**
		 * Start all components related to a specific Scheduling Block 
		 *
		 * Raises exception if no scheduling block is found in the database.
		 * @retun void
		 */
		void startPipelines();
			
		/**
		 * Stop all components related to a specific Scheduling Block
		 * @return void
		 */
		void stopPipelines();
		
			
		/**
		 * Start Sub Array Data Processing  for an Scheduling Block.
		 * 
		 * Raises an exception if called twice.
		 * @param  Sub Array Data Type
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
			
		/**
		 * Stop Sub Array Data Processing for an Scheduling Block.
		 * 
		 * Raises an exception if called twice.
		 * @param  Sub Array Data Type
		 * @return None
		 */
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Update Sub-Array status
		 * SUP-090 SAG Supervisor shall receive the modified SB when a sub-array is modified. 
		 * @return None
		 */
		void updateSubArray()
			raises(SAGErr::SAGGenericEx);
		

	};
		
	interface SAGReco : ACS::ACSComponent
	{

		/**
		 * Start the SAG RECO Supervisor.
		 * The SAG RECO Supervisor will load all its components
		 * Raises an exception if called twice.
		 * @param  @param  Scheduling Block ID
		 * @return None
		 */
		void start (in long sbID)
			raises(SAGErr::SAGRecoAlreadyStartedEx);

		// Stop the SAG Reco Supervisor. The SAG Reco Supervisor will stop all its
		// components Raises an exception if called twice.
		// @return None
		void stop ()
			raises(SAGErr::SAGRecoAlreadyStoppedEx);

		/**
		 * Start the Reco data processing.
		 * Start the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Stop the Reco data processing.
		 * Stop the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		 
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
	};

	interface SAGDataQuality : ACS::ACSComponent
	{

		/**
		 * Start the SAGDataQuality component.
		 * 
		 * Raises an exception if called twice.
		 * @param  Scheduling Block ID
		 * @return None
		 */
		void start (in long sbID)
			raises(SAGErr::SAGDataQualityAlreadyStartedEx);

		/* Stop the SAG Data Quality component.
		*  Raises an exception if called twice.
		*  @return None
		*/
		void stop ()
			raises(SAGErr::SAGDataQualityAlreadyStoppedEx);
		
		/**
		 * Start the Data Quality data processing.
		 * Start the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Stop the Data Quality data processing.
		 * Stop the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);

	};
	
	 interface SAGSci : ACS::ACSComponent
	{

		/**
		 * Start the SAGSci component.
		 * 
		 * Raises an exception if called twice.
		 * @param  Scheduling Block ID
		 * @return None
		 */
		void start (in long sbID)
			raises(SAGErr::SAGSciAlreadyStartedEx);

		/**
		* Stop the SAGSci component. 
		* The SAG Sci Supervisor will stop all its
		* Raises an exception if called twice.
		* @return None
		*/
		void stop ()
			raises(SAGErr::SAGSciAlreadyStoppedEx);
						
		/**
		 * Start the SCI data processing.
		 * Start the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void startDataProcessing ()
			raises(SAGErr::SAGGenericEx);
			
		/**
		 * Stop the SCI data processing.
		 * Stop the data processing with all the pipelines instantiated during the start()
		 * Raises an exception if called twice.
		 * 
		 * @return None
		 */
		void stopDataProcessing ()
			raises(SAGErr::SAGGenericEx);

		

	};

};



#endif

